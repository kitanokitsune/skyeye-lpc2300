# This configuration help texts file format is borrowed from 
# _LINUX_SOURCE_DIR/Documentation/Configure.help.
#
# Format of this file: description<nl>variable<nl>help text<nl><nl>.
# The help texts may contain empty lines, but every non-empty line must
# be indented two positions.  Order of the help texts does not matter,
# however, no variable should be documented twice: if it is, only the
# first occurrence will be used. We try to keep the help texts of related
# variables close together. Lines starting with `#' are ignored. To be
# nice to menuconfig, limit your line length to 70 characters. Use emacs'
# kfill.el to edit and ispell.el to spell check this file or you lose.
#
# Comments of the form "# Choice:" followed by a menu name are used
# internally by the maintainers' consistency-checking tools.
#
# If you add a help text to this file, please try to be as gentle as
# possible. Don't use unexplained acronyms and generally write for the
# hypothetical ignorant but intelligent user who has just bought a PC,
# removed Windows, installed Linux and is now recompiling the kernel
# for the first time. Tell them what to do if they're unsure. Technical
# information should go in a README in the Documentation directory.
#
# Mention all the relevant READMEs and HOWTOs in the help text.
# Make them file URLs relative to the top level of the source tree so
# that help browsers can turn them into hotlinks.  All URLs should be
# surrounded by <>.
#
# Repetitions are fine since the help texts are not meant to be read
# in sequence.  It is good style to include URLs pointing to more
# detailed technical information, pictures of the hardware, etc.
#
# The most important thing to include in a help entry is *motivation*.
# Explain why someone configuring a kernel might want to select your
# option.

Build MiniGUI-Lite
CONFIG_LITE
  Build MiniGUI-Lite version library.
  If you excludes this option, the MiniGUI library will be built as MiniGUI-Threads version.

  In MiniGUI-Lite version, the applications(tasks) are organized as separate processes. 
  There is a server application(process) called "mginit", and other client applications(processes).
  The clients and the server communicates with each other via UNIX Domain Sockets.

  The MiniGUI-Threads version uses pthread library, and the tasks are organized as threads.

Build Stand-Alone version of MiniGUI-Lite
CONFIG_STAND_ALONE
  Build Stand-Alone version of MiniGUI-Lite.

  In normal MiniGUI-Lite version, the applications (tasks) are organized as separate processes. 
  Include this option, we will get a stand-alone version, i.e., there is only a process,
  and no clients can run on the process.

Use built-in resource
CONFIG_INCORE_RES
  Use incore resource data to initialize MiniGUI instead of file I/O.
  Choose this option will override the configuration in MiniGUI.cfg file.

Unit of timer is 10ms
CONFIG_TIMERUNIT10MS
  The MiniGUI timer timeout value is in unit of 10 ms.

  BOOL GUIAPI SetTimer (HWND hWnd, int id, unsigned int speed);

  The argument "speed" in SetTimer function may represent the frequency of the timer,
  or represent the timeout value of the timer. This is depend on
  the runtime library of MiniGUI. If _TIMER_UNIT_10MS is defined,
  "speed" represents the timeout value of the timer, in the unit of 10ms,
  else is the frequency. If "speed" represents the frequency of the timer,
  when it is equal to 10, the timer will expire after every second.

  If you wants to define _TIMER_UNIT_10MS (default), includes this option.

Cursor support (for MiniGUI-Lite)
CONFIG_CURSORSUPPORT
  You can excludes cursor support from MiniGUI library by excluding this option.

User can move window with mouse
CONFIG_MOVEABLE
  In embedded systems, this option may usually be excluded. No one will need or like a moveable
  window on handheld devices like PDA.

Mouse button can do double click
CONFIG_DBCLK
  Double click is not usual in embedded system, you may want to exclude this option.

Build with debugging messages
CONFIG_DEBUG
  Build MiniGUI library with debugging messages.

Trace messages of MiniGUI
CONFIG_TRACEMESSAGE
  Trace messages of MiniGUI.

Include symbol name of messages
CONFIG_MSGSTR
  Include symbol name of messages

Uses old GAL interface and its engines
CONFIG_OLDGAL
  Uses old GAL engines and old GDI interfaces instead of NEWGAL.
 
  NEWGAL engine and new GDI interfaces are more powerful and flexible, 
  but NEWGAL only supports linear FrameBuffer above 8BPP.

  Old GAL supports more display mode (lowest color depth supported is 1BPP black-white mode).
  If you want to use MiniGUI in low color depth devices, includes this option.

Native FrameBuffer graphics GAL engine
CONFIG_GAL_NATIVE
  Native/FBcon FrameBuffer grahpics GAL engine. Based on Linux FrameBuffer, and supports various
  color depths.

Native FrameBuffer graphics GAL engine on Qt Virtual FrameBuffer
CONFIG_GAL_NATIVE_QVFB
  Native/FBcon GAL engine on Qt Virtual FrameBuffer. If you enable it, Native/FBCon GAL engine
  can run on QVFB.

Support for clockwise rotation of screen
CONFIG_GAL_NATIVE_COORTRANS
  Support for clockwise rotation of screen. This option is useful for iPAQ.

R1BPP FB
CONFIG_GAL_NATIVE_R1BPPFB
  Native GAL engine 1BPP FB subdriver (Most significant bit is right).

L1BPP FB
CONFIG_GAL_NATIVE_L1BPPFB
  Native GAL engine 1BPP FB subdriver (Most significant bit is left).

R2BPP FB
CONFIG_GAL_NATIVE_R2BPPFB
  Native GAL engine 2BPP FB subdriver (Most significant bit is right).

L2BPP FB
CONFIG_GAL_NATIVE_L2BPPFB
  Native GAL engine 2BPP FB subdriver (Most significant bit is left).

R4BPP FB
CONFIG_GAL_NATIVE_R4BPPFB
  Native GAL engine 4BPP FB subdriver (Most significant bit is right).

L4BPP FB
CONFIG_GAL_NATIVE_L4BPPFB
  Native GAL engine 4BPP FB subdriver (Most significant bit is left).

8BPP FB
CONFIG_GAL_NATIVE_8BPPFB
  Native GAL engine 8BPP FB subdriver

16BPP FB
CONFIG_GAL_NATIVE_16BPPFB
  Native GAL engine 16BPP FB subdriver

24BPP FB (incompleted)
CONFIG_GAL_NATIVE_24BPPFB
  Native GAL engine 24BPP FB subdriver

32BPP FB
CONFIG_GAL_NATIVE_32BPPFB
  Native GAL engine 32BPP FB subdriver

VGA16 FB (do not include, dangerous)
CONFIG_GAL_NATIVE_VGA16FB
  Dangerous, do not include.

GAL and IAL engine on SVGALIB (for old GAL and MiniGUI-Threads)
CONFIG_GALIAL_SVGALIB
  GAL and IAL engine on SVGALIB (for old GAL and MiniGUI-Threads)

GAL and IAL engine on LibGGI (for old GAL and MiniGUI-Threads)
CONIFG_GALIAL_LIBGGI
  GAL and IAL engine on LibGGI (for old GAL and MiniGUI-Threads)

EP7211-based board (obsolete, do not include)
CONFIG_GAL_EP7211
  EP7211-based board (obsolete, do not include) 

ADS Graphics Client board (obsolete, do not include)
CONFIG_GAL_ADS
  ADS Graphics Client board (obsolete, do not include)

VGA 16-color mode
CONFIG_GAL_VGA16
  Standar VGA 16-color display mode.

Enable text mode
CONFIG_GAL_TEXTMODE
  Excludes this option when your Linux system have text mode, i.e. no console.

EP7211-based board
CONFIG_IAL_EP7211
  EP7211-based board input support

ADS Graphics Client
CONFIG_IAL_ADS
  ADS Graphics Client IAL (StrongARM SA1110).

iPAQ H3600 (also H3800)
CONFIG_IAL_IPAQ
  iPAQ H3600 and H3800 series input support

MPC823
CONFIG_IAL_MPC823
  Support for Sinovee SC823 board touchpad and keyboard.

  Touchpad: ads7846
  Keyboard: zlg7289

NEC VR4181
CONFIG_IAL_VR4181
  NEC VR4181 IAL.

Helio Touch Panel
CONFIG_IAL_HELIO
  Helio Touch Panel.

MT T800
CONFIG_IAL_MTT800
  MT T800 IAL.

Dummy IAL engine
CONFIG_IAL_DUMMY
  You can skip input processing by using Dummy IAL engine.

Native (console) input engine
CONFIG_IAL_NATIVE
  Native (console) input engine is used to support mouse and keyboard on standar PC console.

PS2 mouse
CONFIG_IAL_NATIVE_PS2MOUSE
  Support for PS2 mouse protocol.

IntelligentMouse (IMPS/2) mouse
CONFIG_IAL_NATIVE_IMPS2MOUSE
  Support for IntelligentMouse (IMPS/2) mouse protocol.

MS mouse
CONFIG_IAL_NATIVE_MSMOUSE
  Support for old MS serial mouse.

MS3 mouse
CONFIG_IAL_NATIVE_MS3MOUSE
  Support for MS3 serial mouse.

GPM daemon
CONFIG_IAL_NATIVE_GPM
  Support for GPM mouse daemon.

  You can use GPM to support obsolete mouse type such as serial mouse.

Raw bitmap font
CONFIG_FONT_RBF
  Support for Raw Bitmap Font.

  Raw Bitmap Font format used in MiniGUI is defined by Feynman Software.
  MiniGUI needs at lease one kind RBF font to run (the system font must be Raw Bitmap Font),
  so you should not exclude this option.

Incore GB2312 12x12 RBF font
CONFIG_FONT_INCOREGB12
  Include incore RBF font for GB2312 charset.

  This option is only effective when INCORE_RES option is enabled.

Var bitmap font
CONFIG_FONT_VBF
  Support for Var Bitmap Font (Variable width Bitmap Font).

  Var Bitmap Font format used in MiniGUI is defined by Feynman Software.
  VBF fonts includes Courier, Times and Helvetica fonts.
  
Incore font sansserif
CONFIG_FONT_INCORESSERIF
  Incore font sansserif

Incore font courier
CONFIG_FONT_INCORECOURIER
  Incore font courier

Incore font symbol
CONFIG_FONT_INCORESYMBOL
  Incore font symbol

Incore font vgas
CONFIG_FONT_INCOREVGAS
  Incore font vgas

Qt Prerendered Font
CONFIG_FONT_QPF
  Qt Prerendered Font.

  This font format is defined in Qt/Embedded.
  QPF font uses UNICODE encoding, so UNICODE support must be included if you want to include
  this option.

TrueType font
CONFIG_FONT_TTF
  TrueType font support.
  
  MiniGUI uses freetype 1.3.x library to render truetype fonts.
  Note that MiniGUI can't work on freetype 2.0, so you may need to exclude this option
  if your system uses freetype 2.0.
  
Adobe Type1 font
CONFIG_FONT_TYPE1
  Adobe Type1 font support.

  MiniGUI uses t1 library to render type1 fonts.

East European (Latin 2, ISO-8859-2) charset
CONFIG_CHARSET_LATIN2
  East European (Latin 2, ISO-8859-2) charset

South European (Latin 3, ISO-8859-3) charset
CONFIG_CHARSET_LATIN3
  South European (Latin 3, ISO-8859-3) charset

North European (Latin 4, ISO-8859-4) charset
CONFIG_CHARSET_LATIN4
  North European (Latin 4, ISO-8859-4) charset

Cyrillic (ISO-8859-5) charset
CONFIG_CHARSET_CYRILLIC
  Cyrillic (ISO-8859-5) charset

Arabic (ISO-8859-6) charset
CONFIG_CHARSET_ARABIC
  Arabic (ISO-8859-6) charset

Greek (ISO-8859-7) charset
CONFIG_CHARSET_GREEK
  Greek (ISO-8859-7) charset

Hebrew (ISO-8859-8) charset
CONFIG_CHARSET_HEBREW
  Hebrew (ISO-8859-8) charset

Turkish (Latin 5, ISO-8859-9) charset
CONFIG_CHARSET_LATIN5
  Turkish (Latin 5, ISO-8859-9) charset

Nordic, Latin 6, ISO-8859-10) charset
CONFIG_CHARSET_LATIN6
  Nordic, Latin 6, ISO-8859-10) charset

Thai (ISO-8859-11) charset
CONFIG_CHARSET_THAI
  Thai (ISO-8859-11) charset

Latin 7 (ISO-8859-13) charset
CONFIG_CHARSET_LATIN7
  Latin 7 (ISO-8859-13) charset

Latin 8 (ISO-8859-14) charset
CONFIG_CHARSET_LATIN8
  Latin 8 (ISO-8859-14) charset

Latin 9 (ISO-8859-15, West Extended) charset
CONFIG_CHARSET_LATIN9
  Latin 9 (ISO-8859-15, West Extended) charset

Latin 10 (ISO-8859-16, Romanian) charset
CONFIG_CHARSET_LATIN10
  Latin 10 (ISO-8859-16, Romanian) charset

EUC encoding of GB2312 charset
CONFIG_CHARSET_GB2312
  EUC encoding of GB2312 charset

GBK charset
CONFIG_CHARSET_GBK
  GBK charset

GB18030-0 charset
CONFIG_CHARSET_GB18030
  GB18030-0 charset

BIG5 charset
CONFIG_CHARSET_BIG5
  BIG5 charset

EUC encoding of KSC5636 and KSC5601 charsets
CONFIG_CHARSET_EUCKR
  EUC encoding of KSC5636 and KSC5601 charsets

EUC encoding of JISX0201 and JISX0208 charsets
CONFIG_CHARSET_EUCJP
  EUC encoding of JISX0201 and JISX0208 charsets

Shift-JIS encoding of JISX0201 and JISX0208 charsets
CONFIG_CHARSET_SHIFTJIS
  Shift-JIS encoding of JISX0201 and JISX0208 charsets

UNICODE (ISO-10646-1 and UTF-8 encoding)
CONFIG_CHARSET_UNICODE
  UNICODE (ISO-10646-1 and UTF-8 encoding)

French PC keyboard (non-US 102 keys)
CONFIG_KBD_FRPC
  French PC keyboard (non-US 102 keys)

Keyboard layout for French
CONFIG_KBD_FR
  Keyboard layout for French

Keyboard layout for German
CONFIG_KBD_DE
  Keyboard layout for German

Keyboard layout for German Latin1
CONFIG_KBD_DELATIN1
  Keyboard layout for German Latin1

Keyboard layout for Italian
CONFIG_KBD_IT
  Keyboard layout for Italian

Keyboard layout for Spanish
CONFIG_KBD_ES
  Keyboard layout for Spanish

Keyboard layout for Spanish CP850
CONFIG_KBD_ESCP850
  Keyboard layout for Spanish CP850

Includes SaveBitmap-related functions
CONFIG_IMAGE_SAVEBMP
  Includes SaveBitmap-related functions support.

  If you include this option, SaveBitmapToFile and SaveMyBitmapToFile will be supported.
  You may use this two functions to save BITMAP and MYBITMAP structure to bmp file.
  
PCX file support
CONFIG_IMAGE_PCX
  Supports PCX image format.

LBM/PBM file support
CONFIG_IMAGE_LBM
  Supports LBM/PBM image format.

TGA file support
CONFIG_IMAGE_TGA
  TGA file support

GIF file support
CONFIG_IMAGE_GIF
  GIF file support

JPG file support
CONFIG_IMAGE_JPG
  JPG file support.

  You may need libjpeg library if support this option.

PNG file support
CONFIG_IMAGE_PNG
  PNG file support

  You may need libpng library if support this option.

IME (GB2312) support
CONFIG_IME_GB2312
  Includes GB2312 pinyin input method.

  Pinyin input method needs some ime resource files, including pinyin.tab, 
  pinyin.cin, pinyin.map, pinyin.tab.lx, pinyin.tab.phr.

IME (GB2312) Intelligent Pinyin module
CONFIG_IME_GB2312PINYIN
  IME (GB2312) Intelligent Pinyin module

Using flat window style instead of 3D style
CONFIG_APPEARANCE_FLATSTYLE
  Using flat window style instead of the default 3D style.

  In flat window style, the windows and controls are drawn with flat style, 
  and the bitmap resources used are also different from the 3D style.

Target is a gray screen
CONFIG_APPEARANCE_GRAYSCR
  Supports for gray scale devices. The windows and controls are drawn with 
  flat style and gray scale colors.

  Used within flat window style.

Target is a tiny-size screen
CONFIG_APPEARANCE_TINYSCR
  Supports for tiny-size screen.

  Adjusts the message box size for tiny screen devices.
  Suitable for 160x160 size, and etc.
  
Include About Dialog Box
CONFIG_MISC_ABOUTDLG
  Supports for 'About MiniGUI' dialog. 

  To open or active the 'About MiniGUI' dialog, you should call OpenAboutDialog
  function.  

  Calling this function will create a main window displaying
  copyright and license information of MiniGUI. When the about dialog
  is displaying, calling this function again will bring the dialog to be
  the topmost main window, not create a new one.
  
Include code for screenshots
CONFIG_MISC_SAVESCR
  Includes codes for getting screenshots.

  If this option is included, you can use SaveMainWindowContent function
  to save content of a main window to a file.

Static
CONFIG_CTRL_STATIC
  Static control is used to display information and text, without input capability.

Button
CONFIG_CTRL_BUTTON
  Button control is used to activate an action.

Simple EDIT
CONFIG_CTRL_SIMEDIT
  Simple EDIT control is used to input and display text.
  
  This edit control uses the system default fixed logical font.

Single-Line EDIT
CONFIG_CTRL_SLEDIT
  Single-line EDIT control is used to input and display text.

  This edit control uses the system logical font for control,
  which may be variable-width font.

Multi-Line EDIT
CONFIG_CTRL_MLEDIT
  Multi-line EDIT control is used to input and display text.

  This edit control uses the system logical font for control,
  which may be variable-width font.

Listbox
CONFIG_CTRL_LISTBOX
  Listbox control is used to display a list of items.

Progressbar
CONFIG_CTRL_PROGRESSBAR
  Progressbar control is used to show the varying progress status. 

Toolbar
CONFIG_CTRL_TOOLBAR
  Toolbar control is a tool bar with some button-like item.

Newtoolbar
CONFIG_CTRL_NEWTOOLBAR
  Newtoolbar control is a image-button tool bar used to activate actions.

Menubutton
CONFIG_CTRL_MENUBUTTON
  Menubutton control is a button-like control, clicking on it will drop a 
  menu to choose from.

Trackbar
CONFIG_CTRL_TRACKBAR
  Trackbar control is a track-like bar with a slider on it. This control is
  used to show position status and variance.
  
Combobox
CONFIG_CTRL_COMBOBOX
  With an input area and a click area(arrow), the Combobox controls is used to 
  choose an item and show it in the input area.

  Combobox control with CBS_DROPDOWNLIST style is somewhat like menubutton control. 
  Clicking on a combobox control will drop a menu to choose an item. 

  CBS_SIMPLE style Combobox creates a listbox to display items.
  The current selection in the list box is displayed in the edit control.

  CBS_AUTOSPIN style Combobox creates AutoSpin box to choose an item.
  AutoSpin box has an input field with a spin button. The input field
  displays an integer, and you can click spin button to increase or
  decrease the value of the integer.

  CBS_SPINLIST style Combobox creates SpinList to choose an item.
  SpinList box has an input field with a spin button. The input field
  displays some text, and you can click spin button to change the text.
  The candidate text string comes from the strings you add to the box.

Propsheet
CONFIG_CTRL_PROPSHEET
  Propsheet control has a page title area and a page conten area. Clicking on the
  page title will cause changing the current page and the showing content.

Treeview control
CONFIG_EXT_TREEVIEW
  Treeview control is used to show a list of items with a tree-like fashion.

Listview control
CONFIG_EXT_LISTVIEW
  Listview control is used to display the properties of a list of items.
  A listview is consist of some rows and columns.

Monthcalendar control
CONFIG_EXT_MONTHCAL
  Monthcalendar control displays date information in a calendar-like fashion. 

Spinbox control
CONFIG_EXT_SPINBOX
  Spinbox control is a control with fixed width and height. User can click on the 
  up arrow or the down arrow to change the spinbox current value.
  
Coolbar control
CONFIG_EXT_COOLBAR
  Coolbar control is a simple tool bar with text or image button-like items.

Full gif support
CONFIG_EXT_FULLGIF
  Includes gif animation support.



platform
CONFIG_PLATFORM_LINUX
  Selects the OS platform.

  uClinux(http://www.uclinux.org) is a derivative of Linux kernel intended for microcontrollers without 
  Memory Management Units (MMUs).

  uClinux kernel was created to support non-MMU microprocessors, it is small but retains 
  the main advantages of the linux operating system: stability, superior network capability, 
  and excellent file system support. Most Linux applications can run on uClinux with little 
  or without any changes.

  MiniGUI version 1.3 makes some optimization for uClinux, such as built-in resources support,
  and specific memory allocations.

  To use MiniGUI under uClinux, compiles it as static library.

compiler
CONFIG_COMPILER_ARM
  Choose your cross compiler here.

  arm-linux-gcc :    arm cross compiler for StrongARM, gcc 2.1.3.

  armv4l-linux-gcc : arm cross compiler for arm version 4 little endian, including StrongARM, arm7, arm9. 

  mipsel-linux-gcc : mipsel cross compiler.

  ppc-linux-gcc :    PowerPC cross compiler.

  m68k-elf-gcc :     m68k cross compiler for uClinux.

  arm-elf-gcc :      arm cross compiler for uClinux.

  i386 :             x86 gcc compiler, default.

target
CONFIG_TARGET_M68K_XCOPILOT
  Choose your target processor, useful if compiling for uClinux.

  m68k/68328 :         Motorola mc68328 processor, including Xcopilot emulator, etc
  m68k/68ez328 :       Motorola 68ez328 processor, including Arcturus/uCsimm, etc.
  m68k/Coldfire 5200:  Coldfire 5200.
  m68k/Coldfire 5307:  Coldfire 5307.
  

libc
CONFIG_LIBC_GLIBC
  Selects the uClibc or glibc as the libc.

  uClibc - a Small C Library for Linux
  Erik Andersen <andersen@codepoet.org>

  uClibc is a C library for
  developing embedded Linux systems. It is much smaller than the
  GNU C Library, but nearly all applications supported by glibc
  also work perfectly with uClibc. Porting applications from glibc
  to uClibc typically involves just recompiling the source code.
  uClibc even supports shared libraries and threading. It currently
  runs on standard Linux and MMU-less (also known as uClinux)
  systems with support for alpha, ARM, i386, i960, h8300, m68k,
  mips/mipsel, PowerPC, SH, SPARC, and v850 processors.

  If you are building an embedded Linux system and you find that
  glibc is eating up too much space, you should consider using
  uClibc. If you are building a huge fileserver with 12 Terabytes
  of storage, then using glibc may be a better choice...

  uClibc is maintained by Erik Andersen and is licensed under the
  GNU LIBRARY GENERAL PUBLIC LICENSE . This license allows you to
  make closed source commercial applications using uClibc (Please
  consider sharing some of the money you make ;-). You do not need
  to give away all your source code just because you use uClibc
  and/or run on Linux.

  --------------------------------------------------------------

  uClibc does not support shared library under uClinux now, so you may
  need to compile MiniGUI as static library.

  If you are compiling MiniGUI for uClinux and choose uClibc as the libc
  library, you do not need to configure uClibc separately.

  If you are not using uClibc under uClinux-dist, make sure you have 
  compiled and install uClibc v0.9.19 in the director:
  "/usr/ARCH-linux-uclibc".


uClinux-Dist directory
UCDIST_DIR
  Set directory of your uClinux-dist if you are using uClinux.

uClibc directory
CONFIG_UCLIBC_DIR
  Set directory of your uClibc if you are not using uClibc under uClinux.

uClibc header directory
UCLIBC_HEADER
  Directory of your uClibc header.

uClibc library directory
UCLIBC_LIB
  Directory of your binary uClibc library.

Installation prefix
PREFIX
  Installation prefix for MiniGUI, you are recommended to use the default value.

# End:
