# Usage: skyeye -e <elf> -c <conf>  (execute elf binary)
#        skyeye -c <conf> -d        (daemon waiting for gdb at 12345/tcp)
#
#  skyeye -e a.elf -c skyeye.conf
#        where a.elf is an executable file.
#  skyeye -c skyeye.conf -d
#        gdb can connect with skyeye by command "target remote :12345" in gdb.

#-------------------------------------------------------------------------------
# below is the cpu config info
# cpu maybe arm7tdmi or arm720t

cpu: arm7tdmi

#-------------------------------------------------------------------------------
# below is the machine(develop board) config info
# consult 'skyeye -h' for supported machine(develop board)

mach: lpc2300

#-------------------------------------------------------------------------------
# below is the memory config info
# map=M means ram/rom, map=I means mapped IO space, 
# type=RW means can be read or written, 
# type=R means read only, 
# addr=0x..... means the mem bank's beginning address, 
# size=0x..... means the mem bank's memory size,  
# file=... is the filesystem image file, used for uclinux4skyeye or armlinux4skyeye 


#LPC2300 MEMORY MAP
#////////////////////// Flash ROM ////////////////////////
mem_bank: map=M, type=RW, addr=0x00000000, size=0x00080000
#/////////////////////// Main RAM ////////////////////////
mem_bank: map=M, type=RW, addr=0x40000000, size=0x00010000
#/////////////////////// USB RAM /////////////////////////
mem_bank: map=M, type=RW, addr=0x7FD00000, size=0x00004000
#/////////////////////// ETH RAM /////////////////////////
mem_bank: map=M, type=RW, addr=0x7FE00000, size=0x00004000
#/////////////////// APB Peripherals /////////////////////
mem_bank: map=I, type=RW, addr=0xE0000000, size=0x10000000
#/////////////////// AHB Peripherals /////////////////////
mem_bank: map=I, type=RW, addr=0xF0000000, size=0x10000000
#///////////////////////// I/O ///////////////////////////
mem_bank: map=I, type=RW, addr=0x3FFFC000, size=0x000000A0


#mem_bank: map=M, type=RW, addr=0x0c000000, size=0x00400000, file=./Image,boot=yes
#now, add more options on mem_bank
#mem_bank: map=M, type=RW, addr=0x10000000, size=0x00000800, file=./loader.bin,boot=yes
#start binary program at 0x100000000
#-------------------------------------------------------------------------------
# below is the net config info
# state=on/off means simulated NIC is wired or not, 
# mac=.... means the mac addr in simulated NIC, 
# ethmod=tuntap/vnet means the virtual driver used in host evnironment,
# hostip=... means the ip address in host environment to interactive with skyeye.
# format: state=on/off mac=xx:xx:xx:xx:xx:xx ethmod=tuntap/vnet hostip=dd.dd.dd.dd 
# *********NOTICE**********
#If you run two more skyeyes at the same time,
# please use different skyeye.conf for each skyeye instance, and only one
# skyeye run first and related skyeye.conf content has hostip value:
#     ......
#     net: ... ethmod=vnet, hostip=ddd.ddd.ddd.ddd
#  other skyeye.conf should has content(hostip[0] should be 0):
#     ......
#     net: ... ethmod=vnet, hostip=0.ddd.ddd.ddd

#net: state=off, mac=0:4:3:2:1:f, ethmod=tuntap, hostip=10.0.0.1

#-------------------------------------------------------------------------------
#uart: use it to read/write characters in another terminal
#now you can use them to connect real serial port.
#you can add an option to skyeye.conf as below:

#////////// UART0 //////////
uart:mod=stdio
#uart: fd_in=/dev/ttyS4, fd_out=/dev/ttyS4
#////////// UART1 //////////
#uart:mod=dummy
#////////// UART2 //////////
#uart:mod=dummy
#////////// UART3 //////////
#uart:mod=dummy

#mod=stdio uses terminal's stdio, you can see the output in the terminal.
#mod=dummy is dummy uart, which is connected but responds nothing.
#fd_in=/dev/ttyS(N-1), fd_out=/dev/ttyS(N-1) uses host's COM(N)
#-------------------------------------------------------------------------------
#add log parameter which is used to recode the instr. flow and regs when
#program are running.

#log: logon=0, logfile=./sk1.log, start=0x000000, end=0xffffffff

#logon = 0 or 1 0:doesn't log, 1 do log
#logfile: the filename which have the log info
#start: the start point of instruction flow to log, should >=0
#end:   the end   point of instructio flow to log
